import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, depth=0):
        self.state, self.parent, self.move, self.depth = state, parent, move, depth

    def __lt__(self, other):
        return (self.depth + self.manhattan()) < (other.depth + other.manhattan())

    def manhattan(self):
        return sum(abs(i // 3 - (self.state[i] - 1) // 3) + abs(i % 3 - (self.state[i] - 1) % 3)
                   for i in range(1, 9) if self.state[i] != 0)

    def is_goal(self):
        return self.manhattan() == 0

    def generate_children(self):
        children, moves = [], [(0, 1), (1, 0), (0, -1), (-1, 0)]
        i, j = divmod(self.state.index(0), 3)
        for move in moves:
            new_i, new_j = i + move[0], j + move[1]
            if 0 <= new_i < 3 and 0 <= new_j < 3:
                new_state = self.state[:]
                new_state[i * 3 + j], new_state[new_i * 3 + new_j] = new_state[new_i * 3 + new_j], new_state[i * 3 + j]
                children.append(PuzzleNode(new_state, parent=self, move=(i, j), depth=self.depth + 1))
        return children

def solve_puzzle(initial_state):
    initial_node = PuzzleNode(initial_state)
    visited_states, min_heap = set(), []
    heapq.heappush(min_heap, initial_node)

    while min_heap:
        current_node = heapq.heappop(min_heap)
        if current_node.is_goal():
            return get_solution_path(current_node)
        
        visited_states.add(tuple(current_node.state))

        for child in current_node.generate_children():
            if tuple(child.state) not in visited_states:
                heapq.heappush(min_heap, child)

    return None

def get_solution_path(node):
    path = []
    while node:
        path.append((node.state, node.move))
        node = node.parent
    path.reverse()
    return path


initial_state = [1, 2, 3, 0, 4, 5, 6, 7, 8]


solution_path = solve_puzzle(initial_state)


for state, move in solution_path:
    print("Move:", move)
    for i in range(0, len(state), 3):
        print(state[i:i+3])
    print()
